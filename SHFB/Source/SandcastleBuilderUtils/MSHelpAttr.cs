//===============================================================================================================
// System  : Sandcastle Help File Builder Utilities
// File    : MSHelpAttr.cs
// Author  : Eric Woodruff  (Eric@EWoodruff.us)
// Updated : 05/15/2015
// Note    : Copyright 2011-2015, Eric Woodruff, All rights reserved
// Compiler: Microsoft Visual C#
//
// This file contains a class representing an Microsoft help attribute that can be added to the XML data island
// in each help topic generated by BuildAssembler.
//
// This code is published under the Microsoft Public License (Ms-PL).  A copy of the license should be
// distributed with the code and can be found at the project website: https://GitHub.com/EWSoftware/SHFB.  This
// notice, the author's name, and all copyright notices must remain intact in all applications, documentation,
// and source files.
//
//    Date     Who  Comments
// ==============================================================================================================
// 03/25/2008  EFW  Created the code
// 07/03/2008  EFW  Rewrote to support the MSBuild project format
// 12/18/2011  EFW  Updated to support the new content editors
//===============================================================================================================

using System;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace SandcastleBuilder.Utils
{
    /// <summary>
    /// This represents a Microsoft help attribute that can be added to the XML data island in each help topic
    /// generated by <strong>BuildAssembler</strong>.
    /// </summary>
    public class MSHelpAttr : IComparable<MSHelpAttr>, INotifyPropertyChanged
    {
        #region Private data members
        //=====================================================================

        private string attrName, attrValue;

        #endregion

        #region Properties
        //=====================================================================

        /// <summary>
        /// This is used to get or set the attribute name
        /// </summary>
        public string AttributeName
        {
            get { return attrName; }
            set
            {
                if(value == null || value != attrName)
                {
                    attrName = String.IsNullOrWhiteSpace(value) ? "NoName" : value.Trim();
                    this.OnPropertyChanged();
                }
            }
        }

        /// <summary>
        /// This is used to get or set the attribute value
        /// </summary>
        public string AttributeValue
        {
            get { return attrValue; }
            set
            {
                if(value != attrValue)
                {
                    attrValue = value;
                    this.OnPropertyChanged();
                }
            }
        }
        #endregion

        #region Constructors
        //=====================================================================

        /// <summary>
        /// Default constructor
        /// </summary>
        /// <remarks>The attribute name defaults to "NoName"</remarks>
        public MSHelpAttr() : this(null, null)
        {
        }

        /// <summary>
        /// This constructor is passed the attribute name and value
        /// </summary>
        /// <param name="name">The attribute name</param>
        /// <param name="value">The attribute value</param>
        public MSHelpAttr(string name, string value)
        {
            attrName = String.IsNullOrWhiteSpace(name) ? "NoName" : name.Trim();
            attrValue = value;
        }
        #endregion

        #region IComparable<MSHelpAttr> Members
        // ====================================================================

        /// <summary>
        /// Compares this instance to another instance and returns an indication of their relative values
        /// </summary>
        /// <param name="other">A MSHelpAttr object to compare</param>
        /// <returns>Returns -1 if this instance is less than the value, 0 if they are equal, or 1 if this
        /// instance is greater than the value or the value is null</returns>
        /// <remarks>Entries are sorted by name and then value</remarks>
        public int CompareTo(MSHelpAttr other)
        {
            int result = 0;

            if(other == null)
                return 1;

            result = String.Compare(attrName, other.AttributeName, StringComparison.Ordinal);

            if(result == 0)
                result = String.Compare(attrValue, other.AttributeValue, StringComparison.CurrentCulture);

            return result;
        }
        #endregion

        #region INotifyPropertyChanged Members
        //=====================================================================

        /// <summary>
        /// The property changed event
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// This raises the <see cref="PropertyChanged"/> event
        /// </summary>
        /// <param name="propertyName">The property name that changed</param>
        protected void OnPropertyChanged([CallerMemberName]string propertyName = null)
        {
            var handler = PropertyChanged;

            if(handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
        #endregion

        #region Equality, hash code, and To String
        //=====================================================================

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            MSHelpAttr ha = obj as MSHelpAttr;

            if(ha == null)
                return false;

            return (this == ha || (this.AttributeName == ha.AttributeName && this.AttributeValue == ha.AttributeValue));
        }

        /// <summary>
        /// Get a hash code for this item
        /// </summary>
        /// <returns>Returns the hash code for the attribute name and value.</returns>
        public override int GetHashCode()
        {
            return this.ToString().GetHashCode();
        }

        /// <summary>
        /// Return a string representation of the item
        /// </summary>
        /// <returns>Returns the item in its XML format</returns>
        public override string ToString()
        {
            return String.Format(CultureInfo.InvariantCulture, "<MSHelp:Attr Name=\"{0}\" Value=\"{1}\" />",
                attrName, attrValue);
        }
        #endregion
    }
}
